{
    "info": {
        "_postman_id": "anb-rising-stars-complete-jwt",
        "name": "ANB Rising Stars API - Complete Test Suite (JWT)",
        "description": "Colección completa con JWT authentication según especificación actualizada",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "complete-test-suite-jwt"
    },
    "item": [
        {
            "name": "00 - Authentication",
            "item": [
                {
                    "name": "001 Signup - 201 (OK)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Generate unique email",
                                    "pm.environment.set('email_ok', `tester_${Date.now()}@example.com`);",
                                    "pm.environment.set('password_ok', 'SecurePass123');"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 201', () => pm.response.code === 201);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Tiene user_id', () => pm.expect(b).to.have.property('user_id'));",
                                    "pm.test('Tiene message', () => pm.expect(b).to.have.property('message'));",
                                    "",
                                    "// Save user_id for later tests",
                                    "pm.environment.set('user_id', b.user_id);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"first_name\": \"Ana\",\n  \"last_name\": \"Ríos\",\n  \"email\": \"{{email_ok}}\",\n  \"password1\": \"{{password_ok}}\",\n  \"password2\": \"{{password_ok}}\",\n  \"city\": \"Bogotá\",\n  \"country\": \"CO\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/auth/signup",
                            "host": ["{{base_url}}"],
                            "path": ["auth", "signup"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "002 Signup - 409 (email duplicado)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 409', () => pm.response.code === 409);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error de email duplicado', () => {",
                                    "    pm.expect(b.detail.toLowerCase()).to.include('email');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"first_name\": \"Ana\",\n  \"last_name\": \"Ríos\",\n  \"email\": \"{{email_ok}}\",\n  \"password1\": \"{{password_ok}}\",\n  \"password2\": \"{{password_ok}}\",\n  \"city\": \"Bogotá\",\n  \"country\": \"CO\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/auth/signup",
                            "host": ["{{base_url}}"],
                            "path": ["auth", "signup"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "003 Signup - 400 (passwords no coinciden)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 400', () => pm.response.code === 400);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error de passwords', () => {",
                                    "    const detail = typeof b.detail === 'string' ? b.detail : JSON.stringify(b.detail);",
                                    "    pm.expect(detail.toLowerCase()).to.include('password');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"first_name\": \"Pedro\",\n  \"last_name\": \"López\",\n  \"email\": \"pedro{{$timestamp}}@example.com\",\n  \"password1\": \"Password123\",\n  \"password2\": \"DifferentPass123\",\n  \"city\": \"Medellín\",\n  \"country\": \"CO\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/auth/signup",
                            "host": ["{{base_url}}"],
                            "path": ["auth", "signup"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "01 - Login",
            "item": [
                {
                    "name": "010 Login - 200 (OK)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 200', () => pm.response.code === 200);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Login payload completo', () => {",
                                    "    pm.expect(b).to.have.property('access_token');",
                                    "    pm.expect(b).to.have.property('token_type');",
                                    "    pm.expect(b).to.have.property('expires_in');",
                                    "    pm.expect(b.token_type).to.equal('bearer');",
                                    "    pm.expect(b.expires_in).to.be.a('number');",
                                    "});",
                                    "",
                                    "// Save JWT access_token",
                                    "pm.environment.set('access_token', b.access_token);",
                                    "console.log('Token guardado:', b.access_token.substring(0, 20) + '...');"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{email_ok}}\",\n  \"password\": \"{{password_ok}}\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/auth/login",
                            "host": ["{{base_url}}"],
                            "path": ["auth", "login"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "011 Login - 401 (credenciales inválidas)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 401', () => pm.response.code === 401);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error de autenticación', () => {",
                                    "    pm.expect(b.detail.toLowerCase()).to.include('credential');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{email_ok}}\",\n  \"password\": \"WrongPassword123\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/auth/login",
                            "host": ["{{base_url}}"],
                            "path": ["auth", "login"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "10 - Videos (Privado)",
            "item": [
                {
                    "name": "100 Upload - 201 (OK)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Verificar que tenemos el token",
                                    "const token = pm.environment.get('access_token');",
                                    "if (!token) {",
                                    "    console.error('No hay token. Ejecuta primero el Login (010)');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 201', () => pm.response.code === 201);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Upload payload', () => {",
                                    "    pm.expect(b).to.have.property('message');",
                                    "    pm.expect(b).to.have.property('task_id');",
                                    "});",
                                    "",
                                    "// Save video_id",
                                    "if (b.task_id) {",
                                    "    pm.environment.set('video_id_ok', b.task_id);",
                                    "    console.log('Video ID guardado:', b.task_id);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "video_file",
                                    "type": "file",
                                    "src": "tests/test_data/flex_mini.mp4"
                                },
                                {
                                    "key": "title",
                                    "value": "My Basketball Skills",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{base_url}}/videos/upload",
                            "host": ["{{base_url}}"],
                            "path": ["videos", "upload"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "101 Upload - 401 (sin autenticación)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 401', () => pm.response.code === 401);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error de autenticación', () => {",
                                    "    pm.expect(b.detail.toLowerCase()).to.match(/authorization|unauthorized/);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "video_file",
                                    "type": "file",
                                    "src": "tests/test_data/flex_mini.mp4"
                                },
                                {
                                    "key": "title",
                                    "value": "Invalid Video",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{base_url}}/videos/upload",
                            "host": ["{{base_url}}"],
                            "path": ["videos", "upload"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "102 Upload - 422 (archivo faltante)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 422', () => pm.response.code === 422);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error de validación', () => {",
                                    "    pm.expect(b).to.have.property('detail');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "title",
                                    "value": "Invalid Video",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{base_url}}/videos/upload",
                            "host": ["{{base_url}}"],
                            "path": ["videos", "upload"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "110 List - 200 (OK)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 200', () => pm.response.code === 200);",
                                    "",
                                    "const arr = pm.response.json();",
                                    "pm.test('Lista es array', () => pm.expect(arr).to.be.an('array'));",
                                    "",
                                    "if (arr.length > 0) {",
                                    "    const v = arr[0];",
                                    "    pm.test('Videos tienen campos requeridos', () => {",
                                    "        pm.expect(v).to.have.property('video_id');",
                                    "        pm.expect(v).to.have.property('title');",
                                    "        pm.expect(v).to.have.property('status');",
                                    "        pm.expect(v).to.have.property('uploaded_at');",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/videos",
                            "host": ["{{base_url}}"],
                            "path": ["videos"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "111 List - 401 (sin auth)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 401', () => pm.response.code === 401);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/videos",
                            "host": ["{{base_url}}"],
                            "path": ["videos"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "120 Detail - 200 (OK)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const videoId = pm.environment.get('video_id_ok');",
                                    "if (!videoId || videoId === 'null' || videoId === '') {",
                                    "    console.error('No hay video_id_ok. Ejecuta primero Upload (100)');",
                                    "    pm.execution.skipRequest();",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 200', () => pm.response.code === 200);",
                                    "",
                                    "const v = pm.response.json();",
                                    "pm.test('Detail tiene campos requeridos', () => {",
                                    "    ['video_id', 'title', 'status', 'uploaded_at', 'votes'].forEach(k => {",
                                    "        pm.expect(v).to.have.property(k);",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/videos/{{video_id_ok}}",
                            "host": ["{{base_url}}"],
                            "path": ["videos", "{{video_id_ok}}"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "121 Detail - 404 (inexistente)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 404', () => pm.response.code === 404);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error not found', () => {",
                                    "    pm.expect(b).to.have.property('detail');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/videos/00000000-0000-0000-0000-000000000000",
                            "host": ["{{base_url}}"],
                            "path": ["videos", "00000000-0000-0000-0000-000000000000"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "125 Publish - 200 (OK)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const videoId = pm.environment.get('video_id_ok');",
                                    "if (!videoId || videoId === 'null' || videoId === '') {",
                                    "    console.error('No hay video_id_ok. Ejecuta primero Upload (100)');",
                                    "    pm.execution.skipRequest();",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 200', () => pm.response.code === 200);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Publish confirmado', () => {",
                                    "    pm.expect(b.message).to.exist;",
                                    "    pm.expect(b.message.toLowerCase()).to.include('publish');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/videos/{{video_id_ok}}/publish",
                            "host": ["{{base_url}}"],
                            "path": ["videos", "{{video_id_ok}}", "publish"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "131 Delete - 400 (video público)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const videoId = pm.environment.get('video_id_ok');",
                                    "if (!videoId || videoId === 'null' || videoId === '') {",
                                    "    console.error('No hay video_id_ok');",
                                    "    pm.execution.skipRequest();",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 400', () => pm.response.code === 400);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error de política', () => {",
                                    "    pm.expect(b.detail.toLowerCase()).to.include('public');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/videos/{{video_id_ok}}",
                            "host": ["{{base_url}}"],
                            "path": ["videos", "{{video_id_ok}}"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "132 Delete - 404 (inexistente)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 404', () => pm.response.code === 404);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error not found', () => {",
                                    "    pm.expect(b).to.have.property('detail');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/videos/00000000-0000-0000-0000-000000000000",
                            "host": ["{{base_url}}"],
                            "path": ["videos", "00000000-0000-0000-0000-000000000000"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "20 - Público",
            "item": [
                {
                    "name": "200 List públicos - 200 (OK)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 200', () => pm.response.code === 200);",
                                    "",
                                    "const arr = pm.response.json();",
                                    "pm.test('Lista pública es array', () => pm.expect(arr).to.be.an('array'));",
                                    "",
                                    "if (arr.length > 0) {",
                                    "    const v = arr[0];",
                                    "    pm.test('Campos requeridos presentes', () => {",
                                    "        ['video_id', 'title', 'processed_url', 'username', 'city', 'votes'].forEach(k => {",
                                    "            pm.expect(v).to.have.property(k);",
                                    "        });",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/public/videos?limit=20&offset=0",
                            "host": ["{{base_url}}"],
                            "path": ["public", "videos"],
                            "query": [
                                {
                                    "key": "limit",
                                    "value": "20"
                                },
                                {
                                    "key": "offset",
                                    "value": "0"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "210 Vote - 200 (OK)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const videoId = pm.environment.get('video_id_ok');",
                                    "if (!videoId || videoId === 'null' || videoId === '') {",
                                    "    console.error('No hay video_id_ok. Ejecuta primero Upload y Publish');",
                                    "    pm.execution.skipRequest();",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 200', () => pm.response.code === 200);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Voto registrado', () => {",
                                    "    pm.expect(b).to.have.property('message');",
                                    "    pm.expect(b).to.have.property('video_id');",
                                    "    pm.expect(b).to.have.property('votes');",
                                    "    pm.expect(b.message.toLowerCase()).to.include('vote');",
                                    "    pm.expect(b.video_id).to.be.a('string');",
                                    "    pm.expect(b.votes).to.be.a('number');",
                                    "    pm.expect(b.votes).to.be.at.least(1);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/public/videos/{{video_id_ok}}/vote",
                            "host": ["{{base_url}}"],
                            "path": ["public", "videos", "{{video_id_ok}}", "vote"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "211 Vote - 401 (sin auth)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const videoId = pm.environment.get('video_id_ok');",
                                    "if (!videoId || videoId === 'null' || videoId === '') {",
                                    "    pm.execution.skipRequest();",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 401', () => pm.response.code === 401);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error de autenticación', () => {",
                                    "    pm.expect(b.detail.toLowerCase()).to.match(/authorization|unauthorized/);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/public/videos/{{video_id_ok}}/vote",
                            "host": ["{{base_url}}"],
                            "path": ["public", "videos", "{{video_id_ok}}", "vote"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "212 Vote - 400 (ya votó)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const videoId = pm.environment.get('video_id_ok');",
                                    "if (!videoId || videoId === 'null' || videoId === '') {",
                                    "    pm.execution.skipRequest();",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 400', () => pm.response.code === 400);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error ya votó', () => {",
                                    "    pm.expect(b.detail.toLowerCase()).to.include('already');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/public/videos/{{video_id_ok}}/vote",
                            "host": ["{{base_url}}"],
                            "path": ["public", "videos", "{{video_id_ok}}", "vote"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "213 Vote - 404 (inexistente)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 404', () => pm.response.code === 404);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error not found', () => {",
                                    "    pm.expect(b).to.have.property('detail');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{access_token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/public/videos/00000000-0000-0000-0000-000000000000/vote",
                            "host": ["{{base_url}}"],
                            "path": ["public", "videos", "00000000-0000-0000-0000-000000000000", "vote"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "220 Rankings - 200 (OK)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 200', () => pm.response.code === 200);",
                                    "",
                                    "const arr = pm.response.json();",
                                    "pm.test('Rankings es array', () => pm.expect(arr).to.be.an('array'));",
                                    "",
                                    "if (arr.length > 0) {",
                                    "    const r = arr[0];",
                                    "    pm.test('Rankings tienen campos requeridos', () => {",
                                    "        ['position', 'username', 'city', 'votes'].forEach(k => {",
                                    "            pm.expect(r).to.have.property(k);",
                                    "        });",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/public/rankings?limit=20&offset=0",
                            "host": ["{{base_url}}"],
                            "path": ["public", "rankings"],
                            "query": [
                                {
                                    "key": "limit",
                                    "value": "20"
                                },
                                {
                                    "key": "offset",
                                    "value": "0"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "221 Rankings - 200 (filtro city)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 200', () => pm.response.code === 200);",
                                    "",
                                    "const arr = pm.response.json();",
                                    "if (arr.length > 0) {",
                                    "    pm.test('Todos de la ciudad especificada', () => {",
                                    "        arr.forEach(item => {",
                                    "            pm.expect(item.city).to.equal('Bogotá');",
                                    "        });",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/public/rankings?city=Bogotá&limit=20&offset=0",
                            "host": ["{{base_url}}"],
                            "path": ["public", "rankings"],
                            "query": [
                                {
                                    "key": "city",
                                    "value": "Bogotá"
                                },
                                {
                                    "key": "limit",
                                    "value": "20"
                                },
                                {
                                    "key": "offset",
                                    "value": "0"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "222 Rankings - 422 (params inválidos)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status 422', () => pm.response.code === 422);",
                                    "",
                                    "const b = pm.response.json();",
                                    "pm.test('Error de validación', () => {",
                                    "    pm.expect(b).to.have.property('detail');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/public/rankings?limit=-1&offset=0",
                            "host": ["{{base_url}}"],
                            "path": ["public", "rankings"],
                            "query": [
                                {
                                    "key": "limit",
                                    "value": "-1"
                                },
                                {
                                    "key": "offset",
                                    "value": "0"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:8000/api",
            "type": "string"
        },
        {
            "key": "email_ok",
            "value": "",
            "type": "string"
        },
        {
            "key": "password_ok",
            "value": "",
            "type": "string"
        },
        {
            "key": "access_token",
            "value": "",
            "type": "string"
        },
        {
            "key": "user_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "video_id_ok",
            "value": "",
            "type": "string"
        }
    ]
}